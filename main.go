package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/BurntSushi/toml"
	"github.com/amarnathcjd/gogram/telegram"
)

var (
	Db        *sql.DB
	PostLimit int = 5
	Me        *telegram.UserObj
	Config    ConfigType
	StartTime time.Time
	PostText  string = `
<b>–ö–æ–Ω—Ñ–∞:</b> %s
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> %v
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
%s
	`
)

func main() {
	StartTime = time.Now()

	// –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
	if _, err := toml.DecodeFile("config.toml", &Config); err != nil {
		panic(err)
	}

	Db = DbInit()

	client, err := telegram.NewClient(telegram.ClientConfig{
		AppID: int32(Config.AppID), AppHash: Config.AppHash,
		LogLevel: telegram.LogInfo,
	})
	defer client.Stop()

	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	if err := client.Connect(); err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	client.LoginBot(Config.BotToken) // or client.Login("<phone-number>") for user account, or client.AuthPrompt() for interactive login

	Me, _ = client.GetMe()
	log.Println("–ü—Ä–æ–∏–∑–æ—à–µ–ª –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç " + Me.Username)

	client.On(telegram.OnMessage, func(message *telegram.NewMessage) error {
		if len(message.Message.Entities) > 0 && message.Message.Entities[0].CRC() == 0x6cef8ac7 {
			// –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—É—Å—Ç—å –µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ö—ç–Ω–¥–ª–µ—Ä
			return nil
		}

		u := GetUserInfo(message.ChatID())
		state := strings.Split(u.State, "|")
		switch state[0] {
		case "admin":
			if state[1] == "edit" {
				admin_conf_edit_finalize(message, u)
			}
			return nil
		case "search":
			if state[1] == "text" {
				search_by_text_final(message)
			}
		}

		return nil

	}, telegram.FilterPrivate)

	client.On("command:start", func(message *telegram.NewMessage) error {
		u := new(UserInfo)
		u.UserID = message.ChatID()
		u.Username = message.Sender.Username
		AddUserInfo(u)

		InsertIntoDB(Db, "UPDATE users SET state = ? WHERE user_id = ?", "idle", u.UserID)

		message.Respond("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å–≤–æ–π –∫—Ñ, —á—Ç–æ–±—ã –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏–º –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.", telegram.SendOptions{
			ReplyMarkup: telegram.NewKeyboard().NewGrid(3, 1,
				telegram.Button.Data("üîé –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ñ—ã", "search"),
				telegram.Button.Data("‚öôÔ∏è –ú–æ–∏ –∫–æ–Ω—Ñ—ã", "admin"),
				telegram.Button.URL("‚ôøÔ∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ ‚ôøÔ∏è", "https://t.me/conf_catalog"),
			).Build(),
		})
		return nil
	})

	client.On("callback:start", func(query *telegram.CallbackQuery) error {
		InsertIntoDB(Db, "UPDATE users SET state = ? WHERE user_id = ?", "idle", query.SenderID)

		query.Respond("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å–≤–æ–π –∫—Ñ, —á—Ç–æ–±—ã –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏–º –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.", &telegram.SendOptions{
			ReplyMarkup: telegram.NewKeyboard().NewGrid(3, 1,
				telegram.Button.Data("üîé –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ñ—ã", "search"),
				telegram.Button.Data("‚öôÔ∏è –ú–æ–∏ –∫–æ–Ω—Ñ—ã", "admin"),
				telegram.Button.URL("‚ôøÔ∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ ‚ôøÔ∏è", "https://t.me/conf_catalog"),
			).Build(),
		})
		query.Delete()
		return nil
	})

	client.On(telegram.OnParticipant, func(m *telegram.ParticipantUpdate) error {
		if m.User.ID != Me.ID {
			return nil
		}

		if m.IsKicked() || m.IsBanned() || m.IsDemoted() || m.IsLeft() {
			client.SendMessage(
				m.OriginalUpdate.ActorID,
				"üò© –í—ã –≤—ã–≥–Ω–∞–ª–∏ –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ö–æ–Ω—Ñ–∞ —Å–Ω—è—Ç–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–∞",
			)

			InsertIntoDB(Db,
				"DELETE FROM admins WHERE channel_id = ?", m.OriginalUpdate.ChannelID)

			InsertIntoDB(Db,
				"DELETE FROM confs WHERE channel_id = ?", m.OriginalUpdate.ChannelID)
			return nil
		}

		insert := InsertIntoDB(Db,
			"INSERT INTO confs (title, post, banner, channel_id, catalog_id) VALUES (?, ?, ?, ?, ?)",
			m.Channel.Title, "", "", m.ChannelID(), 1)
		last_id, _ := insert.LastInsertId()

		InsertIntoDB(Db,
			"INSERT INTO admins (admin_id, channel_id) VALUES (?, ?)",
			m.ActorID(), m.ChannelID())

		client.SendMessage(m.ActorID(), fmt.Sprintf("üòò –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª \"%s\"", m.Channel.Title), &telegram.SendOptions{
			ReplyMarkup: telegram.NewKeyboard().NewColumn(1,
				telegram.Button.Data(
					"‚úçüèª –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É",
					"admin|edit|"+strconv.FormatInt(last_id, 10),
				)).Build(),
		})

		return nil
	})

	search_handlers(client)
	admin_handlers(client)
	conf_handler(client)

	client.Idle() // block main goroutine until client is closed
}
